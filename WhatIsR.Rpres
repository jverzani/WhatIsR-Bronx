What Is R
========================================================
author: John Verzani, CUNY/College of Staten Island
date: April 16, 2018
autosize: true


Self described
========================================================

> R is ‘GNU S’, a freely available language and environment for statistical computing and graphics which provides a wide variety of statistical and graphical techniques: linear and nonlinear modelling, statistical tests, time series analysis, classification, clustering, etc.

https://cran.r-project.org/


History of R 
========================================================

```{r, echo=FALSE, results="asis"}
out = read.csv(textConnection("Year, Occurence
1976, S created (Old S) at Bell Laboratories
1988, New S created (S3; model specification notation)
1988, S-PLUS formed
1993, S-Plus acquires exclusive license to distribute S
1995, initial version of R released
1998, S4
2000, R 1.0.0 released 
2003, R Foundation founded
2004, R 2.0.0 released
2007, Revolution Analytics was founded
2011, Initial release of R Studio
2012, R Shiny on CRAN
2015, R Consortium founded
2015, Revolution acquired by Microsoft
"))
kable(out)
```






Users of R
========================================================

* Estimates of R users are at least 2-3 million.

* Many add on packages (currently 12,444)

![](cran-2016.png)




Sources of additional information
========================================================

* There is a (partial) list of [books about R](https://www.r-project.org/doc/bib/R-books.html) (only 162)

* Many packages are described in [The R Journal](https://journal.r-project.org/).

* Bloggers are aggregated at [r-bloggers](https://www.r-bloggers.com/).

* There are [mailing lists](https://www.r-project.org/mail.html).







Some basic features
========================================================

Let's go over some common tasks in R that might be done in an introductory statistics course.
While there are some GUIs for R to facilitate some of this, the strength of R comes from
its programming interface, so lets stick to that.




Some basic: vectors, functions, and data frames
========================================================

Univariate data is stored in "vectors" -- 1-dimensional arrays of elements of the same class. Missing values are coded with `NA`:

```{r}
name = c("Cooper", "Glashow", "Weinberg", "Schwartz","Hulse", "Politzer", "Glauber", "Lefkowitz")
year = c(47, 50, 50, 49, 66,66,41,59)
awarded = c(1972, 1979, 1979, 1988, 1993, 2004, 2005, 2012)
fields = c(rep("Physics", length(year)-1), "Chemistry")
fields  # view last one defined
```

Functions
========================================================

Functions are called using parentheses, as above where `c(...)` is used to combine its arguments.

Functions in R are typically "vectorized" to work with all values as whole:

```{r}
min(year)   # reduction
max(year)
toupper(fields)  # f([x1,...,xn]) = [f(x1),...,f(xn)]
```

Data frames
========================================================

Multivariate data is usually combined in a "data frame" -- each row records values or different variables of a "case", each column records all values for a variable:

```{r}
nobels = data.frame(name=name, year=year, 
                    awarded=awarded, fields=fields)
nobels
```

Access
========================================================

Variables in data frames may be accessed in many ways. Here is one way to call them by name:

```{r}
table(nobels$year)     # data_frame_name$variable_name
```

As data frames are rectangular, there is (matrix) syntax to call them by row and column

```{r}
nobels[1, c(1,2)]  # first row; first & second cols
```

(`[` is for indexing objects by number, name, or logical vectors;  `$` is special syntax for accessing a variable by name from within some objects, such as data frames.)

Real data
========================================================

A brief indulgence, R can be used to webscrape data. This grabs data from a US News and world report page about Bronx Science. It is the data used to make a graphic about percentage of the grade that test at the grade level or higher:

```{r}
library(httr); library(rvest); library(rjson)
url = "http://www.usnews.com/education/best-high-schools/new-york/districts/new-york-city-public-schools/bronx-high-school-of-science-13207"
UA = "Mozilla/5.0 (Linux; <Android Version>; <Build Tag etc.>) AppleWebKit/<WebKit Rev> (KHTML, like Gecko) Chrome/<Chrome Rev> Mobile Safari/<WebKit Rev>"

out = httr::GET(url, user_agent(UA))  # must trick us news
```

continued... process data
============================================================

```{r}
u = read_html(out) %>% 
  xml_nodes(xpath='//*[@type="chart-json"]')
u = u[[3]] %>% html_text() %>% 
  fromJSON        # process data for graphic

row1 = as.data.frame(u[[1]], stringsAsFactors=FALSE)
nyc_schools = Reduce(rbind, u[-1], row1) # combine rows
kable(head(nyc_schools))   # first 6/460
```

Summary Statistics
========================================================

R has a full set of summary statistics built in:

```{r}
mean(nyc_schools$Mathematics)
median(nyc_schools$Mathematics)
sd(nyc_schools$Mathematics)
IQR(nyc_schools$Mathematics)
```

continued ....
==========================================

```{r}
summary(nyc_schools$Mathematics)
quantile(nyc_schools$Mathematics, probs=seq(0,1,by=.1))
```

```{r}
gp = function(x) cut(x, 20*(0:5), include.lowest = TRUE)
xtabs(~gp(Mathematics) + gp(English), nyc_schools)
```

continued.....
========================================================

```{R}
stem(nyc_schools$English)
```

Statistical Graphics
========================================================

R has at least 3 main mechanisms for producing graphics:

* base graphics (look a bit dated now, but quite robust and straightforward)
* lattice graphics (adopted from S-Plus in early 2000s, multivariate displays)
* ggplot2 graphics (attention to look of graphics, abstractions employed. Appear in the NY Times and elsewhere)

Histogram
========================================================

A histogram of a data set: How did English scores do

```{r}
hist(nyc_schools$English)
```



A quantile plot
========================================================

```{r}
qqnorm(nyc_schools$English)
```

A boxplot to compare both scores
========================================================

```{r}
out = subset(nyc_schools, select=c("English", "Mathematics"))
boxplot(out)
```

The scatter plot
========================================================

```{r}
plot(nyc_schools$Mathematics, nyc_schools$English)
```



A parallel coordinates plot
========================================================

```{r}
peers = c(30, 177)
you = c(128)
nyc_schools$color = "gray90"
nyc_schools$color[peers] = "black"
nyc_schools$color[you] = "blue"
library(MASS)
parcoord(nyc_schools[1:200 ,c(1,3)], col=nyc_schools$color)
```


Other R graphics engines
=====================================

These work best with "stacked" data, where additional variables store various categories. Here we reshape the data into a two columns, one storing a test score, the other the test type

```{r}
nyc_stacked = stack(nyc_schools, c("Mathematics", "English"))
head(nyc_stacked) 
```

Lattice graphics
=====================================================

```{r}
library(lattice)
histogram(~ values | ind, nyc_stacked)
```

ggplot2
====================================

```{r}
library(ggplot2)
ggplot(nyc_stacked, aes(x=ind, y=values)) + geom_boxplot()
```

Probability distributions
========================================================

R has many probability distributions built in or available through add-on packages.

```{r}
rbinom(10, 5, 1/2)  # 5 coins tossed 10 times. Counts number of heads
dbinom(4, 5, 1/2)   # probability 5 coin tosses give 4 heads
choose(5,4) * (1/2)^4 * (1/2)^1
```

Left tails
======================================================
```{r}
pbinom(1, 5, 1/2)   # probability of 0 or 1 heads in 5 coin tosses
mu = 5*1/2; sigma=sqrt(5*1/2*(1 - 1/2))  # mu = np; sigmq = sqrt(n*p*(1-p))
pnorm(1, mu, sigma) # normal approximation
pnorm(1+1/2, mu, sigma) # with correction
```


Statistical Inference
========================================================

Suppose, you had independent samples, would you think the English and Math Scores have the same mean?

A test of $\mu_e = \mu_m$ would be done with

```{r}
t.test(nyc_schools$Mathematics, nyc_schools$English, var.equal=FALSE)
```

Paired test
========================================================

But these scores aren't independent. A paired test seems more appropriate (a test of $y_i = e_i - m_i$ had $\mu = 0$):

```{r}
t.test(nyc_schools$Mathematics, nyc_schools$English, paired=TRUE) 
```

Using the model interface
========================================================

R has a special interface to specify a statistical model. (We used it with `lattice`.)

Above we passed two vectors, here we use a "factor" (a categorical variable):

```{r}
t.test(values ~ ind, data=nyc_stacked, paired=TRUE)
```

Linear models
========================================================

The model $y_i = \alpha + \beta x_i + e_i$ is fit similarly:

```{r}
res = lm(English ~ Mathematics, data=nyc_schools)
res
```

ANOVA
=======================================================

ANOVA models are fit as linear models with categorical variables. The t-test (non paired) with an assumption of equal variance is equivalent to a basic one-way ANOVA. 

```{r}
res = lm(values ~ ind, nyc_stacked)  # ind is categorical
summary(res)
```

Data manipulations
========================================================

Example taken from [dplyr-tutorial](https://rpubs.com/justmarkham/dplyr-tutorial).

The `hflights` package contains a large data set on airline flights:

```{r}
library(hflights)
dim(hflights)  # 227,496 cases; 21 variables
names(hflights)
```

Using dplyr
=========================

```{r}
library(dplyr)  # data wrangling tool of choice
flights <- tbl_df(hflights)  # make a copy
flights
```



Let's ask some questions:
=====================================

* What flights left on Jan 1?
* Which of these were on American Airlines?
* Which airline had the most flights on Jan 1?
* What was the average flight length by airline?
* Which airline had largest variance in delay times?


What flights left on Jan 1?
=============================
January 1 is all cases with `Month=1` and `DayOfMonth=1`
```{r}
jan1 = filter(flights, Month==1, DayofMonth==1)
head(jan1, n=5)
```


Which of these were on American Airlines?
===========================================

```{r}
xtabs( ~ UniqueCarrier, jan1)  # 7 are American (AA)
filter(jan1, UniqueCarrier == "AA")
```

Which airline had the most flights on Jan 1?
============================================

We can see `XE` had the most, 222. As an alternative to cross tabulation, we can do a group-by operation using 

```{r}
group_by(jan1, UniqueCarrier) %>%
  summarize(size=n()) %>%
  arrange(desc(size))  # sort in descending order
```

The `n` function counts cases. We can use other functions here.

What was the average flight length by airline?
===============================================
For example, the `AirTime` variable records time in air. The average of this *after* grouping by carrier is found with:

```{r}
group_by(jan1, UniqueCarrier) %>% summarize(avg=mean(AirTime,na.rm=TRUE)) %>%
  arrange(desc(avg)) %>% head(n=3)
```

We can see `AS` was longest.

Which airline had largest variance in delay times?
==================================================

If we instead use the `DepDelay` variable, we have

```{r}
group_by(jan1, UniqueCarrier) %>% summarize(avg=mean(DepDelay,na.rm=TRUE), sd=sd(DepDelay, na.rm=TRUE)) %>% arrange(desc(sd)) %>% head(n=3)
```

(Why is `AS` -- the longest on average, `NA` here?)





More details
========================================================

```{r}
summary(res)
```


As a programming language
========================================================

* R is a dynamic scripting (interpreted) language

* R is vectorized

* Easy to define functions

```{r}
kurtosis = function(x, ctr=mean(x)) {
  zi = (x-ctr)/(sd(x) * sqrt((n-1)/n))
  1/length(x) * sum(zi^4) - 3
}
```

* functions are first class objects

* has object-oriented features through "generic" functions 

```
summary(nyc_schools$English)
summary(nyc_schools$English)
```

(several OOP style implementations)

* Has built in support for mathematical programming (functions, arrays)



Teaching (statistics) with R
========================================================

Pros:

* designed for interactive statistical explorations
* Designed with great attention to numeric issues
* most graphics, functions are built in
* Can be used with real-world data or built in data
* easy to extend, if need be, by user-defined functions or user-contributed packages
* non-programmers can pick up some CS concepts
* can easily grow as student interests evolve
* valued in industry
* R Studio is a great IDE for beginners and more advanced users
* R Studio makes writing richly styled reports quite easy
* R Studio's Shiny package can make it easy to write R-powered interactive web pages
* R is open source
continued ...
========================================================

Cons:

* programming languages are hard to pick up at first. R is easier than Python, but still not easy
* time is spent on specifics of data manipulation, even if not desirable
* time for learning about statistics is spent on computer science-like concepts
* hard to find online help, as there is *too* much. (The [mosaic](https://cran.r-project.org/web/packages/mosaic/index.html) package streamlines the experience for new users)
* hard to keep the entire class at the same point (as some students pick it up quite quickly)